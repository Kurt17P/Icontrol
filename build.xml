<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Icontrol" default="default" basedir=".">
    <description>Builds, tests, and runs the project Icontrol.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Icontrol-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    
    <!--    ===================
            POST-COMPILE TARGET
            =================== -->
        
    <target name="-post-compile">
 
        <!--    ++++++++++++++
                RxTx libraries
                ++++++++++++++   -->
 
 
        <!--  Copy the rxtxSerial.dll 
              With the RxTx library files copied to the lib folder and with
              the lib folder added to the java.library.path, they were not
              found. So it's easiest to keep them in the root dir -->
        <copy file="_misc/libraries/RxTx/rxtxSerial.dll"
              todir="${dist.dir}" />
        
        <!--  Copy the librxtxSerial.jnilib 
        This version is good for Java 5, but not compiled for 64 bit/Java 6
        try terminal command file on this file to see the difference
        <copy file="_misc/libraries/RxTx/librxtxSerial.jnilib"
              todir="${dist.dir}" />-->
        
        <!--  Copy the librxtxSerial.jnilib -->
        <copy file="_misc/libraries/RxTx/librxtxSerial Java6.jnilib"
              tofile="${dist.dir}/librxtxSerial.jnilib" />
 
 
 
        <!--    ++++++++++++++++++
                Yokogawa libraries
                ++++++++++++++++++   -->
 
        <!--  Copy the required files for the TMCTL library -->
        <copy file="_misc/libraries/Yokogawa/tmctl.dll"
              todir="${dist.dir}/lib" />
              
        <copy file="_misc/libraries/Yokogawa/USBTMCAPI.dll"
              todir="${dist.dir}/lib" />
              
        <copy file="_misc/libraries/Yokogawa/YKMUSB.dll"
              todir="${dist.dir}/lib" />

        <copy file="_misc/libraries/Yokogawa/ykusb.dll"
              todir="${dist.dir}/lib" />



 
        <!--    ++++++++
                iC stuff
                ++++++++   -->


        <!--  Copy _ReadMe_iC.txt -->
        <copy file="_misc/_ReadMe_iC.txt"
              todir="${dist.dir}" />
        
        <!--  Copy ChangeLog.txt -->
        <copy file="_misc/ChangeLog.txt"
              todir="${dist.dir}" />
        

        <!--  Copy License.txt -->
        <copy file="_misc/Licence.txt"
              todir="${dist.dir}" />
        
        <!-- Copy the default iC directory to the place where it belongs
             if an error occurs, use todir="${dist.dir}/iC" -->
        <!-- <echo> dist.dir = ${dist.dir} </echo>
        <echo> user.dir = ${user.dir} </echo>
        <echo> user.home = ${user.home} </echo> -->
        <copy todir="${user.home}/iC" includeEmptyDirs="true">
            <fileset dir="_misc/iC"></fileset>
        </copy>
        
        

        <!-- STORE SUBVERSION BUILD STRING 
             http://stackoverflow.com/a/1022238 -->
        <exec executable="svnversion"
              failonerror = "false"
              failifexecutionfails = "false"
              output="${src.dir}/icontrol/resources/scm-version.txt" />
              
    </target>
    
    
    
    
    <!--    =================
            POST-CLEAN TARGET
            ================= -->
    
    <target name="-post-clean">
        
        <!-- After a Clean&Build, copy the default iC directory into the dist 
             dir for easier distribution of Instrument Control (iC) -->
        <copy todir="${dist.dir}/iC" includeEmptyDirs="true">
            <fileset dir="_misc/iC"></fileset>
        </copy>        
        
    </target>
    
    
    
    <!--    ===============
            POST-JAR TARGET
            =============== -->
    
    <target name="-post-jar">
        
        <!--  Delete Readme.txt  -->
        <delete file="${dist.dir}/README.TXT"
                failonerror="false" />
                
    </target>
    
</project>
